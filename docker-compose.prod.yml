services:
  eventoasis:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: event_oasis_container_prod
    networks:
      - event_management_network
    ports:
      - '8000:8000'
    environment:
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}

      - DATABASE_SYNC=${DATABASE_SYNC}
      - DATABASE_AUTOLOAD=${DATABASE_AUTOLOAD}
      - NODE_ENV=${NODE_ENV}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=8000
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_TOKEN_SECRET=${JWT_ACCESS_TOKEN_SECRET}
      - JWT_REFRESH_TOKEN_SECRET=${JWT_REFRESH_TOKEN_SECRET}
      - JWT_ACCESS_TOKEN_EXPIRATION_TIME=1h
      - JWT_REFRESH_TOKEN_EXPIRATION_TIME=604800
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - MAIL_FROM=${MAIL_FROM}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      event-management-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  event-management-db:
    image: postgres:15-alpine
    container_name: event_management_db_prod
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${DATABASE_NAME:-postgres}
      # DATABASE_HOST: ${DATABASE_HOST:-event_management_db}
      POSTGRES_PORT: ${DATABASE_PORT:-5432}
    ports:
      - '5432:5432'
    networks:
      - event_management_network
    volumes:
      - event_management_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_USERNAME}']
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:8-alpine
    container_name: redis_container_prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - '6379:6379'
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    networks:
      - event_management_network
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  redis_data_prod:
    name: redis_data_prod
    driver: local
  event_management_data_prod:
    name: event_management_data_prod
    driver: local

networks:
  event_management_network:
    driver: bridge
